@inject SoundManager SoundManager
@inject AudioService AudioService
@inject NavigationManager NavigationManager
@inject HttpClient Http
@using System.Net.Http.Headers
@using System.Net.Http.Json

<PageTitle>FakeInstants - Adicionar Sons</PageTitle>

<div class="upload-container">
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-8">
                <!-- Upload Area -->
                <div class="upload-area"
                     @ondragover="HandleDragOver"
                     @ondragleave="HandleDragLeave"
                     @ondrop="HandleDrop"
                     @ondrop:preventDefault="true"
                     @ondragover:preventDefault="true">

                    <div class="upload-icon">
                        <i class="fas fa-cloud-upload-alt"></i>
                    </div>

                    <h4>Arraste arquivos de áudio aqui</h4>
                    <p class="text-muted">ou</p>

                    <InputFile id="fileInput"
                              OnChange="HandleFileSelection"
                              multiple
                              accept=".mp3,.wav,.ogg,.aac,.m4a,.flac" />

                    <label for="fileInput" class="btn btn-primary">
                        <i class="fas fa-folder-open me-2"></i>Selecionar Arquivos
                    </label>

                    <p class="mt-3 small text-muted">
                        Formatos suportados: MP3, WAV, OGG, AAC, M4A, FLAC
                    </p>
                </div>

                <!-- Upload Progress -->
				@if (UploadQueue.Count > 0)
                {
                    <div class="upload-progress mt-4">
                        <h5>Processando @UploadQueue.Count arquivo(s)...</h5>
                        <div class="progress mb-3">
                            <div class="progress-bar"
                                 role="progressbar"
                                 style="width: @(UploadProgress)%">
                                @UploadProgress%
                            </div>
                        </div>
                    </div>
                }

				@if (UploadQueue.Count > 0)
				{
					<div class="mt-4">
						<h5>Arquivos selecionados (@UploadQueue.Count)</h5>
						<div class="row">
							@foreach (var item in UploadQueue)
							{
								<div class="col-md-6 col-lg-4 mb-3">
									<div class="card">
										<div class="card-body">
											<h6 class="card-title">@item.FileName</h6>
											<p class="card-text small text-muted">@item.Format.ToUpper() • @item.Size</p>
											<button class="btn btn-sm btn-primary" @onclick="() => AddToStaged(item)">
												<i class="fas fa-plus me-1"></i>Adicionar à lista
											</button>
										</div>
									</div>
								</div>
							}
						</div>
					</div>
				}
            </div>

            <div class="col-lg-4">
                <!-- Upload Settings -->
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Configurações</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label class="form-label">Categoria</label>
                            <select class="form-select" @bind="SelectedCategoryId">
                                <option value="">Selecione uma categoria</option>
                                @foreach (var category in Categories)
                                {
                                    <option value="@category.Id">@category.Name</option>
                                }
                            </select>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Descrição (opcional)</label>
                            <textarea class="form-control"
                                     rows="3"
                                     placeholder="Adicione uma descrição para os sons..."
                                     @bind="DefaultDescription"></textarea>
                        </div>

                        <div class="mb-3">
                            <div class="form-check">
                                <input class="form-check-input"
                                       type="checkbox"
                                       id="autoOrganize"
                                       @bind="AutoOrganize" />
                                <label class="form-check-label" for="autoOrganize">
                                    Organização automática por categoria
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    <!-- Staged Files Preview -->
    @if (StagedUploads.Count > 0)
        {
			<div class="mt-4">
            <h5>Sons na lista (@StagedUploads.Count)</h5>
                <div class="row">
                @foreach (var item in StagedUploads)
                    {
                        <div class="col-md-6 col-lg-4 mb-3">
                            <div class="card">
                                <div class="card-body">
                                <h6 class="card-title">@item.FileName</h6>
                                <p class="card-text small text-muted">@item.Format.ToUpper() • @FormatFileSize(item.Size)</p>
                                    <button class="btn btn-sm btn-outline-danger"
                                        @onclick="() => RemoveStagedUpload(item)">
                                        <i class="fas fa-trash me-1"></i>Remover
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <div class="mt-3">
                <button class="btn btn-success me-2" @onclick="SaveAllSounds" disabled="@(!StagedUploads.Any())">
                        <i class="fas fa-save me-2"></i>Salvar Todos
                    </button>
                    <button class="btn btn-outline-secondary" @onclick="ClearAll">
                        <i class="fas fa-times me-2"></i>Limpar
                    </button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private sealed class PendingUpload
    {
        public IBrowserFile File { get; init; } = default!;
        public string FileName { get; init; } = string.Empty;
        public long Size { get; init; }
        public string Format { get; init; } = string.Empty;
    }

    private List<PendingUpload> UploadQueue { get; set; } = new();
    private List<PendingUpload> StagedUploads { get; set; } = new();
    private List<Category> Categories { get; set; } = new();
    private string SelectedCategoryId { get; set; } = "";
    private string DefaultDescription { get; set; } = "";
    private bool AutoOrganize { get; set; } = true;
    private int UploadProgress { get; set; } = 0;
    private bool IsDragOver { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await SoundManager.InitializeAsync();
        Categories = await SoundManager.GetAllCategoriesAsync();
    }

    private void HandleDragOver(DragEventArgs e)
    {
        IsDragOver = true;
    }

    private void HandleDragLeave(DragEventArgs e)
    {
        IsDragOver = false;
    }

    private async Task HandleDrop(DragEventArgs e)
    {
        IsDragOver = false;
        // Note: Drag and drop file handling would need additional implementation
        // For now, we'll skip this and focus on file input
    }

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        await ProcessFilesAsync(e.GetMultipleFiles());
    }

    private async Task ProcessFilesAsync(IEnumerable<IBrowserFile> files)
    {
        UploadProgress = 0;
        UploadQueue.Clear();

        var validFiles = files.Where(f => IsValidAudioFile(f)).ToList();

        if (validFiles.Count == 0)
        {
            // Show error message
            return;
        }

        foreach (var file in validFiles)
        {
            var format = Path.GetExtension(file.Name).TrimStart('.').ToLower();
            UploadQueue.Add(new PendingUpload
            {
                File = file,
                FileName = file.Name,
                Size = file.Size,
                Format = format
            });
        }
    }

    private async Task<Sound?> UploadFileAsync(IBrowserFile file, string? categoryId)
    {
        try
        {
            var fileName = file.Name;
            var format = Path.GetExtension(fileName).TrimStart('.').ToLower();

            if (!IsValidAudioFile(file))
                return null;

            var categoryToUse = categoryId;

            // Upload multipart to the backend and receive Sound metadata
            using var content = new MultipartFormDataContent();
            var stream = file.OpenReadStream(maxAllowedSize: 50 * 1024 * 1024);
            var fileContent = new StreamContent(stream);
            var mimeType = GetMimeType(format);
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(mimeType);
            content.Add(fileContent, "file", file.Name);
            if (!string.IsNullOrEmpty(categoryToUse))
            {
                content.Add(new StringContent(categoryToUse), "categoryId");
            }

            var response = await Http.PostAsync("/upload", content);
            if (!response.IsSuccessStatusCode)
                return null;

            var sound = await response.Content.ReadFromJsonAsync<Sound>();
            if (sound == null)
                return null;

            // Apply optional description from UI
            if (!string.IsNullOrEmpty(DefaultDescription))
            {
                sound.Description = DefaultDescription;
            }

            return sound;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error processing file {file.Name}: {ex.Message}");
            return null;
        }
    }

    private string GetMimeType(string format)
    {
        return format.ToLower() switch
        {
            "mp3" => "audio/mpeg",
            "wav" => "audio/wav",
            "ogg" => "audio/ogg",
            "aac" => "audio/aac",
            "m4a" => "audio/mp4",
            "flac" => "audio/flac",
            _ => "audio/mpeg"
        };
    }

    private async Task<string> SuggestCategoryAsync(Sound sound)
    {
        // Simple categorization based on file name or content
        var name = sound.Name.ToLower();

        if (name.Contains("meme") || name.Contains("funny") || name.Contains("lol"))
            return Categories.FirstOrDefault(c => c.Name.Contains("Memes", StringComparison.OrdinalIgnoreCase))?.Id ?? Categories.First().Id;

        if (name.Contains("music") || name.Contains("song"))
            return Categories.FirstOrDefault(c => c.Name.Contains("Música", StringComparison.OrdinalIgnoreCase))?.Id ?? Categories.First().Id;

        if (name.Contains("game") || name.Contains("gaming"))
            return Categories.FirstOrDefault(c => c.Name.Contains("Games", StringComparison.OrdinalIgnoreCase))?.Id ?? Categories.First().Id;

        return Categories.First().Id; // Default category
    }

    private bool IsValidAudioFile(IBrowserFile file)
    {
        var validExtensions = new[] { ".mp3", ".wav", ".ogg", ".aac", ".m4a", ".flac" };
        var extension = Path.GetExtension(file.Name).ToLower();
        return validExtensions.Contains(extension);
    }

    private void AddToStaged(PendingUpload item)
    {
        if (!StagedUploads.Contains(item))
        {
            StagedUploads.Add(item);
        }
    }

    private void RemoveStagedUpload(PendingUpload item)
    {
        StagedUploads.Remove(item);
    }

    private async Task SaveAllSounds()
    {
        if (StagedUploads.Count == 0)
            return;

        foreach (var item in StagedUploads)
        {
            string? categoryToUse = null;
            if (!string.IsNullOrEmpty(SelectedCategoryId))
            {
                categoryToUse = SelectedCategoryId;
            }
            else if (AutoOrganize)
            {
                var tempSound = new Sound { Name = Path.GetFileNameWithoutExtension(item.FileName) };
                categoryToUse = await SuggestCategoryAsync(tempSound);
            }

            var uploaded = await UploadFileAsync(item.File, categoryToUse);
            if (uploaded != null)
            {
                await SoundManager.AddProcessedSoundAsync(uploaded);
            }
        }

        StagedUploads.Clear();
        NavigationManager.NavigateTo("/");
    }

    private void ClearAll()
    {
        // Clear staged and selected lists
        StagedUploads.Clear();
        UploadQueue.Clear();
        UploadProgress = 0;
    }

    private static string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        int order = 0;
        double size = bytes;
        while (size >= 1024 && order < sizes.Length - 1)
        {
            order++;
            size /= 1024;
        }
        return $"{size:0.##} {sizes[order]}";
    }
}
