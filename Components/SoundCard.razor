@inject AudioService AudioService
@implements IDisposable

<div class="sound-card @(IsPlaying ? "playing" : "") @(Sound.Favorite ? "favorite" : "")"
     @onclick="OnPlayClick">

    @if (IsPlaying)
    {
        <div class="playing-indicator">
            <i class="fas fa-volume-up"></i>
            <span>Tocando</span>
        </div>
        <div class="stop-overlay">
            <div class="stop-icon">
                <i class="fas fa-stop-circle"></i>
                <span>Clique para parar</span>
            </div>
        </div>
    }

    <div class="sound-header">
        <div class="sound-name" title="@Sound.DisplayName">
            @Sound.DisplayName
        </div>
        <button class="btn btn-sm btn-link favorite-btn"
                @onclick:stopPropagation="true"
                @onclick="OnFavoriteClick">
            <i class="fas fa-star favorite-icon @(Sound.Favorite ? "fas" : "far")"></i>
        </button>
    </div>

    @if (ShowDescriptions && !string.IsNullOrEmpty(Sound.Description))
    {
        <div class="sound-description">
            @Sound.Description
        </div>
    }

    <div class="sound-meta">
        <div class="sound-info">
            <small class="text-muted">
                @Sound.DurationFormatted • @Sound.Format.ToUpper()
            </small>
        </div>
        <div class="sound-actions">
            @if (Sound.PlayCount > 0)
            {
                <small class="text-muted">
                    <i class="fas fa-play me-1"></i>@Sound.PlayCount
                </small>
            }
            <button class="btn btn-sm btn-outline-secondary ms-2"
                    @onclick:stopPropagation="true"
                    @onclick="OnEditClick">
                <i class="fas fa-edit"></i>
            </button>
            <button class="btn btn-sm btn-outline-danger ms-1"
                    @onclick:stopPropagation="true"
                    @onclick="OnDeleteClick">
                <i class="fas fa-trash"></i>
            </button>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(CategoryName))
    {
        <div class="category-tag" style="background-color: @CategoryColor; color: white;">
            <i class="@CategoryIcon me-1"></i>@CategoryName
        </div>
    }
</div>

@code {
    [Parameter] public Sound Sound { get; set; } = new();
    [Parameter] public EventCallback OnPlay { get; set; }
    [Parameter] public EventCallback OnFavoriteToggle { get; set; }
    [Parameter] public EventCallback OnEdit { get; set; }
    [Parameter] public EventCallback OnDelete { get; set; }
    [Parameter] public bool ShowDescriptions { get; set; } = true;

    private bool IsPlaying { get; set; }
    private string CategoryName { get; set; } = "";
    private string CategoryColor { get; set; } = "#007bff";
    private string CategoryIcon { get; set; } = "fas fa-music";

    [Inject] private SoundManager SoundManager { get; set; } = default!;

    protected override async Task OnParametersSetAsync()
    {
        await LoadCategoryInfoAsync();
    }

    protected override void OnInitialized()
    {
        AudioService.AudioStarted += OnAudioStarted;
        AudioService.AudioEnded += OnAudioEnded;
    }

    public void Dispose()
    {
        AudioService.AudioStarted -= OnAudioStarted;
        AudioService.AudioEnded -= OnAudioEnded;
    }

    private void OnAudioStarted(object? sender, string soundId)
    {
        var wasPlaying = IsPlaying;
        IsPlaying = soundId == Sound.Id;
        
        if (IsPlaying != wasPlaying)
        {
            Console.WriteLine($"[SoundCard] Audio started - Sound: {Sound.DisplayName} ({Sound.Id}), IsPlaying: {IsPlaying}");
            InvokeAsync(StateHasChanged);
        }
    }

    private void OnAudioEnded(object? sender, string soundId)
    {
        if (soundId == Sound.Id)
        {
            Console.WriteLine($"[SoundCard] Audio ended - Sound: {Sound.DisplayName} ({Sound.Id}), Setting IsPlaying to false");
            IsPlaying = false;
            InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoadCategoryInfoAsync()
    {
        if (SoundManager != null && !string.IsNullOrEmpty(Sound.CategoryId))
        {
            var categories = await SoundManager.GetAllCategoriesAsync();
            var category = categories.FirstOrDefault(c => c.Id == Sound.CategoryId);
            if (category != null)
            {
                CategoryName = category.Name;
                CategoryColor = category.Color;
                CategoryIcon = category.Icon;
            }
        }
    }

    private async Task OnPlayClick()
    {
        // Se já está tocando, para o áudio (toggle behavior)
        if (IsPlaying)
        {
            Console.WriteLine($"[SoundCard] Stopping currently playing audio: {Sound.DisplayName} ({Sound.Id})");
            await AudioService.StopSoundAsync(Sound.Id);
        }
        else
        {
            // Se não está tocando, toca o áudio
            Console.WriteLine($"[SoundCard] Playing audio: {Sound.DisplayName} ({Sound.Id})");
            await OnPlay.InvokeAsync();
        }
    }

    private async Task OnFavoriteClick()
    {
        await OnFavoriteToggle.InvokeAsync();
    }

    private async Task OnEditClick()
    {
        await OnEdit.InvokeAsync();
    }

    private async Task OnDeleteClick()
    {
        await OnDelete.InvokeAsync();
    }
}

