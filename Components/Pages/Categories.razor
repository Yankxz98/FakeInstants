@page "/categories"
@using fakeinstants.Models
@using fakeinstants.Services
@inject SoundManager SoundManager
@inject ILogger<Categories> Logger

<PageTitle>FakeInstants - Categorias</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h2>Gerenciamento de Categorias</h2>
            <p class="text-muted">Organize seus sons em categorias personalizadas.</p>
        </div>
    </div>

    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h5>Categorias Existentes</h5>
                </div>
                <div class="card-body">
                    @if (categories == null)
                    {
                        <p>Carregando categorias...</p>
                    }
                    else
                    {
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Nome</th>
                                    <th>Sons</th>
                                    <th>Ações</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var category in categories)
                                {
                                    <tr>
                                        <td>@category.Name</td>
                                        <td>@category.SoundCount</td>
                                        <td>
                                            <button class="btn btn-sm btn-primary" @onclick="() => EditCategory(category)">Editar</button>
                                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteCategory(category.Id)">Excluir</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                     <h5>@(isEditing ? "Editar Categoria" : "Adicionar Nova Categoria")</h5>
                </div>
                <div class="card-body">
                    <EditForm Model="@newCategory" OnValidSubmit="HandleSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="categoryName" class="form-label">Nome da Categoria</label>
                            <InputText id="categoryName" class="form-control" @bind-Value="newCategory.Name" />
                        </div>

                        <button type="submit" class="btn btn-success">@(isEditing ? "Salvar" : "Adicionar")</button>
                        @if (isEditing)
                        {
                            <button type="button" class="btn btn-secondary" @onclick="ResetForm">Cancelar</button>
                        }
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Category>? categories;
    private Category newCategory = new();
    private bool isEditing = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        try
        {
            categories = await SoundManager.GetAllCategoriesAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Erro ao carregar categorias");
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            if (isEditing)
            {
                await SoundManager.UpdateCategoryAsync(newCategory);
            }
            else
            {
                await SoundManager.AddCategoryAsync(newCategory.Name, newCategory.Description);
            }
            await LoadCategories();
            ResetForm();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Erro ao salvar categoria");
        }
    }

    private void EditCategory(Category category)
    {
        newCategory = category;
        isEditing = true;
    }

    private async Task DeleteCategory(string categoryId)
    {
        try
        {
            await SoundManager.DeleteCategoryAsync(categoryId);
            await LoadCategories();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Erro ao excluir categoria");
        }
    }
    
    private void ResetForm()
    {
        newCategory = new();
        isEditing = false;
        StateHasChanged();
    }
}

