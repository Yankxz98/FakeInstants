@using System.Timers
@inject SoundManager SoundManager
@inject AudioService AudioService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ILogger<SoundList> Logger

<div class="sound-list-container">
    <!-- Search and Filters -->
    <div class="search-container">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-6">
                    <input type="text"
                           class="form-control search-input"
                           placeholder="Buscar sons..."
                           @bind="SearchQuery"
                           @bind:event="oninput"
                           @onkeydown="OnSearchKeyDown" />
                </div>
                <div class="col-md-3">
                    <select class="form-select" @bind="SelectedCategoryId">
                        <option value="">Todas as categorias</option>
                        @foreach (var category in Categories)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </select>
                </div>
                <div class="col-md-3">
                    <select class="form-select" @bind="SortBy">
                        <option value="name">Nome</option>
                        <option value="recent">Mais recentes</option>
                        <option value="played">Mais tocados</option>
                        <option value="duration">Duração</option>
                    </select>
                </div>
            </div>
        </div>
    </div>

    <!-- Sound Grid -->
    @if (IsLoading)
    {
        <div class="text-center py-5">
            <div class="loading-spinner"></div>
            <p class="mt-3">Carregando sons...</p>
        </div>
    }
    else if (FilteredSounds.Count == 0)
    {
        <div class="text-center py-5">
            <i class="fas fa-music fa-3x text-muted mb-3"></i>
            <h4>Nenhum som encontrado</h4>
            <p class="text-muted">
                @if (string.IsNullOrEmpty(SearchQuery) && string.IsNullOrEmpty(SelectedCategoryId))
                {
                    <text>Adicione seus primeiros sons clicando em "Adicionar" acima.</text>
                }
                else
                {
                    <text>Tente ajustar os filtros de busca.</text>
                }
            </p>
        </div>
    }
    else
    {
        <div class="sound-grid" data-size="@GridSize">
            @foreach (var sound in FilteredSounds)
            {
                <SoundCard Sound="sound"
                          OnPlay="() => PlaySound(sound)"
                          OnFavoriteToggle="() => ToggleFavorite(sound)"
                          OnEdit="() => EditSound(sound)"
                          OnDelete="() => DeleteSound(sound)" />
            }
        </div>
    }
</div>

@code {
    [Parameter] public bool ShowOnlyFavorites { get; set; }

    private List<Sound> AllSounds { get; set; } = new();
    private List<Category> Categories { get; set; } = new();
    private List<Sound> FilteredSounds { get; set; } = new();
    private bool IsLoading { get; set; } = true;
    private string SearchQuery { get; set; } = "";
    private string SelectedCategoryId { get; set; } = "";
    private string SortBy { get; set; } = "name";
    private string GridSize { get; set; } = "medium";

    private System.Timers.Timer? _searchTimer;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation($"SoundList.razor - Component initialized, AutoLoad: {AutoLoad}");
        _searchTimer = new System.Timers.Timer(300);
        _searchTimer.Elapsed += async (s, e) => await ApplyFiltersAsync();
        _searchTimer.AutoReset = false;

        if (AutoLoad)
        {
            await LoadDataAsync();
        }
        else
        {
            IsLoading = false;
        }
    }

    [Parameter] public bool AutoLoad { get; set; } = false;

    public async Task LoadDataManuallyAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        Logger.LogInformation("SoundList.LoadDataAsync() - Starting to load data...");

        try
        {
            Logger.LogInformation("SoundList.LoadDataAsync() - Setting IsLoading to true...");
            IsLoading = true;
            StateHasChanged();
            Logger.LogInformation("SoundList.LoadDataAsync() - StateHasChanged completed");

            Logger.LogInformation("SoundList.LoadDataAsync() - Initializing SoundManager...");
            await SoundManager.InitializeAsync();
            Logger.LogInformation("SoundList.LoadDataAsync() - SoundManager initialized");

            Logger.LogInformation("SoundList.LoadDataAsync() - Loading sounds...");
            AllSounds = await SoundManager.GetAllSoundsAsync();
            Logger.LogInformation($"SoundList.LoadDataAsync() - Loaded {AllSounds.Count} sounds");

            Logger.LogInformation("SoundList.LoadDataAsync() - Loading categories...");
            Categories = await SoundManager.GetAllCategoriesAsync();
            Logger.LogInformation($"SoundList.LoadDataAsync() - Loaded {Categories.Count} categories");

            Logger.LogInformation("SoundList.LoadDataAsync() - Applying filters...");
            await ApplyFiltersAsync();
            Logger.LogInformation("SoundList.LoadDataAsync() - Filters applied");

            Logger.LogInformation("SoundList.LoadDataAsync() - Data loading completed successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "SoundList.LoadDataAsync() - Error loading data");
            // Handle error
            Console.Error.WriteLine($"Error loading data: {ex.Message}");
            Console.Error.WriteLine($"Stack trace: {ex.StackTrace}");
        }
        finally
        {
            Logger.LogInformation("SoundList.LoadDataAsync() - Setting IsLoading to false...");
            IsLoading = false;
            StateHasChanged();
            Logger.LogInformation("SoundList.LoadDataAsync() - Final StateHasChanged completed");
        }
    }

    private async Task ApplyFiltersAsync()
    {
        var filtered = AllSounds.AsQueryable();

        // Apply favorites filter
        if (ShowOnlyFavorites)
        {
            filtered = filtered.Where(s => s.Favorite);
        }

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(SearchQuery))
        {
            var query = SearchQuery.ToLower();
            filtered = filtered.Where(s =>
                s.Name.ToLower().Contains(query) ||
                s.Description.ToLower().Contains(query) ||
                s.Tags.Any(t => t.ToLower().Contains(query))
            );
        }

        // Apply category filter
        if (!string.IsNullOrEmpty(SelectedCategoryId))
        {
            filtered = filtered.Where(s => s.Category == SelectedCategoryId);
        }

        // Apply sorting
        filtered = SortBy switch
        {
            "recent" => filtered.OrderByDescending(s => s.CreatedAt),
            "played" => filtered.OrderByDescending(s => s.PlayCount),
            "duration" => filtered.OrderByDescending(s => s.Duration),
            _ => filtered.OrderBy(s => s.DisplayName)
        };

        FilteredSounds = filtered.ToList();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnSearchKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            _searchTimer?.Stop();
            await ApplyFiltersAsync();
        }
        else
        {
            _searchTimer?.Stop();
            _searchTimer?.Start();
        }
    }

    private async Task PlaySound(Sound sound)
    {
        await AudioService.PlaySoundAsync(sound);
        await SoundManager.UpdateSoundAsync(sound);
        StateHasChanged();
    }

    private async Task ToggleFavorite(Sound sound)
    {
        sound.Favorite = !sound.Favorite;
        await SoundManager.UpdateSoundAsync(sound);
        StateHasChanged();
    }

    private void EditSound(Sound sound)
    {
        // Navigate to edit page or show modal
        NavigationManager.NavigateTo($"edit/{sound.Id}");
    }

    private async Task DeleteSound(Sound sound)
    {
        if (await ConfirmDeleteAsync(sound))
        {
            await SoundManager.DeleteSoundAsync(sound.Id);
            await LoadDataAsync();
        }
    }

    private async Task<bool> ConfirmDeleteAsync(Sound sound)
    {
        // This would typically use a modal dialog
        // For now, we'll use a simple browser confirm
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
            $"Tem certeza que deseja excluir o som '{sound.DisplayName}'?");
        return confirmed;
    }

    private async Task OnCategoryChanged()
    {
        await ApplyFiltersAsync();
    }

    private async Task OnSortChanged()
    {
        await ApplyFiltersAsync();
    }

    public void Dispose()
    {
        _searchTimer?.Dispose();
    }
}
