@inject AudioService AudioService

<div class="audio-controls">
    <div class="container-fluid">
        <div class="row align-items-center">
            <div class="col-auto">
                <button class="btn btn-outline-secondary btn-sm" @onclick="StopAllSounds">
                    <i class="fas fa-stop"></i>
                </button>
            </div>

            <div class="col volume-control">
                <i class="fas fa-volume-down"></i>
                <input type="range"
                       class="volume-slider"
                       min="0"
                       max="1"
                       step="0.1"
                       @bind="Volume"
                       @bind:event="oninput"
                       @onchange="OnVolumeChanged" />
                <i class="fas fa-volume-up"></i>
                <span class="ms-2 text-muted">@($"{Volume:P0}")</span>
            </div>

            <div class="col-auto">
                <small class="text-muted">
                    @ActiveSounds sons ativos
                </small>
            </div>
        </div>
    </div>
</div>

@code {
    private double Volume { get; set; } = 1.0;
    private int ActiveSounds { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        // This would be updated by AudioService events in a real implementation
        // For now, we'll just set a default volume
        await AudioService.SetVolumeAsync(Volume);
    }

    private async Task OnVolumeChanged()
    {
        await AudioService.SetVolumeAsync(Volume);
    }

    private async Task StopAllSounds()
    {
        await AudioService.StopAllSoundsAsync();
        ActiveSounds = 0;
        StateHasChanged();
    }
}

